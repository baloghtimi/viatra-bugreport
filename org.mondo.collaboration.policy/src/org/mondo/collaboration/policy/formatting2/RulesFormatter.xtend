/*
 * generated by Xtext 2.12.0
 */
package org.mondo.collaboration.policy.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.mondo.collaboration.policy.rules.AccessControlModel
import org.mondo.collaboration.policy.rules.AttributeFact
import org.mondo.collaboration.policy.rules.Binding
import org.mondo.collaboration.policy.rules.Group
import org.mondo.collaboration.policy.rules.ObjectFact
import org.mondo.collaboration.policy.rules.Policy
import org.mondo.collaboration.policy.rules.ReferenceFact
import org.mondo.collaboration.policy.rules.Role
import org.mondo.collaboration.policy.rules.Rule
import org.mondo.collaboration.policy.rules.User
import org.mondo.collaboration.policy.services.RulesGrammarAccess

class RulesFormatter extends AbstractFormatter2 {
	
	@Inject extension RulesGrammarAccess

	def dispatch void format(AccessControlModel model, extension IFormattableDocument document) {
		for (Role role : model.roles) {
			role.format;
		}
		model.getPolicy.format;
	}

	def dispatch void format(Policy policy, extension IFormattableDocument document) {
		policy.regionFor.keyword("policy").prepend[newLine]
		policy.regionFor.keyword("{").prepend[oneSpace].append[newLine]	
		policy.regionFor.keyword("}").prepend[newLine].append[oneSpace]	
		for (Rule rule : policy.getRules()) {
			rule.format
		}		
		interior(policy.regionFor.keyword("{"), policy.regionFor.keyword("}"), [indent])
	}
	
	def dispatch void format(Rule rule, extension IFormattableDocument document) {
		rule.regionFor.keyword("rule").prepend[newLine].append[oneSpace]
        rule.regionFor.keyword("{").prepend[oneSpace].append[newLine]
        rule.regionFor.keyword("from").prepend[newLine].append[oneSpace]
        rule.regionFor.keyword("query").prepend[oneSpace].append[oneSpace]
        rule.regionFor.keyword("select").prepend[newLine].append[oneSpace]
        rule.regionFor.keyword("}").prepend[newLine].append[noSpace]
        rule.asset.format
        for(Binding binding : rule.bindings) {
        	binding.format
        }
		interior(rule.regionFor.keyword("{"), rule.regionFor.keyword("}"), [indent])
	}
	
	def dispatch void format(Binding binding, extension IFormattableDocument document) {
		binding.regionFor.keyword("where").prepend[newLine].append[oneSpace]
    	binding.regionFor.keyword("is").prepend[oneSpace].append[oneSpace]
    	binding.regionFor.keyword("bound").prepend[oneSpace].append[oneSpace]
    	binding.regionFor.keyword("to").prepend[oneSpace].append[oneSpace]
    }
	
	def dispatch void format(User user, extension IFormattableDocument document) {
		user.regionFor.keyword("where").prepend[newLine]
	}
	
	def dispatch void format(ObjectFact fact, extension IFormattableDocument document) {
		fact.regionFor.keyword("obj").prepend[oneSpace]
		fact.regionFor.keyword("(").prepend[oneSpace].append[oneSpace]	
		fact.regionFor.keyword(")").prepend[oneSpace].append[oneSpace]	
	}
	
	def dispatch void format(ReferenceFact fact, extension IFormattableDocument document) {
		fact.regionFor.keyword("obj").prepend[oneSpace]
		fact.regionFor.keyword("(").prepend[oneSpace].append[oneSpace]	
		fact.regionFor.keyword("->").prepend[oneSpace].append[oneSpace]	
		fact.regionFor.keyword(":").prepend[oneSpace].append[oneSpace]	
		fact.regionFor.keyword(")").prepend[oneSpace].append[oneSpace]	
	}
	
	def dispatch void format(AttributeFact fact, extension IFormattableDocument document) {
		fact.regionFor.keyword("obj").prepend[oneSpace]
		fact.regionFor.keyword("(").prepend[oneSpace].append[oneSpace]	
		fact.regionFor.keyword("->").prepend[oneSpace].append[oneSpace]	
		fact.regionFor.keyword(":").prepend[oneSpace].append[oneSpace]	
		fact.regionFor.keyword(")").prepend[oneSpace].append[oneSpace]	
	}
	
	def dispatch void format(Group group, extension IFormattableDocument document) {
		group.regionFor.keyword("group").prepend[newLine]
		group.regionFor.keyword("{").prepend[oneSpace]
		group.regionFor.keyword(",").prepend[noSpace].append[oneSpace]
		group.regionFor.keyword("}").prepend[noSpace]
		
	}
}
